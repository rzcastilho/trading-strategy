defmodule TradingStrategy.Signal do
  @moduledoc """
  Represents a trading signal generated by a strategy.

  A signal indicates when to enter or exit a position based on
  the strategy's conditions and market data.
  """

  @type signal_type :: :entry | :exit
  @type direction :: :long | :short
  @type t :: %__MODULE__{
          type: signal_type(),
          direction: direction(),
          timestamp: DateTime.t(),
          price: float(),
          symbol: String.t(),
          strategy: atom(),
          metadata: map()
        }

  defstruct [
    :type,
    :direction,
    :timestamp,
    :price,
    :symbol,
    :strategy,
    metadata: %{}
  ]

  @doc """
  Creates a new trading signal.

  ## Examples

      iex> TradingStrategy.Signal.new(:entry, :long, "BTCUSD", 50000.0)
      %TradingStrategy.Signal{
        type: :entry,
        direction: :long,
        symbol: "BTCUSD",
        price: 50000.0,
        timestamp: ~U[2025-10-19 12:00:00Z]
      }
  """
  def new(type, direction, symbol, price, opts \\ []) do
    %__MODULE__{
      type: type,
      direction: direction,
      symbol: symbol,
      price: price,
      timestamp: Keyword.get(opts, :timestamp, DateTime.utc_now()),
      strategy: Keyword.get(opts, :strategy),
      metadata: Keyword.get(opts, :metadata, %{})
    }
  end

  @doc """
  Checks if a signal is an entry signal.
  """
  def entry?(%__MODULE__{type: :entry}), do: true
  def entry?(_), do: false

  @doc """
  Checks if a signal is an exit signal.
  """
  def exit?(%__MODULE__{type: :exit}), do: true
  def exit?(_), do: false

  @doc """
  Checks if a signal is for a long position.
  """
  def long?(%__MODULE__{direction: :long}), do: true
  def long?(_), do: false

  @doc """
  Checks if a signal is for a short position.
  """
  def short?(%__MODULE__{direction: :short}), do: true
  def short?(_), do: false
end
